# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _KinematicCore
else:
    import _KinematicCore

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _KinematicCore.delete_SwigPyIterator

    def value(self):
        return _KinematicCore.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _KinematicCore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _KinematicCore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _KinematicCore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _KinematicCore.SwigPyIterator_equal(self, x)

    def copy(self):
        return _KinematicCore.SwigPyIterator_copy(self)

    def next(self):
        return _KinematicCore.SwigPyIterator_next(self)

    def __next__(self):
        return _KinematicCore.SwigPyIterator___next__(self)

    def previous(self):
        return _KinematicCore.SwigPyIterator_previous(self)

    def advance(self, n):
        return _KinematicCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _KinematicCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _KinematicCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _KinematicCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _KinematicCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _KinematicCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _KinematicCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _KinematicCore:
_KinematicCore.SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _KinematicCore.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _KinematicCore.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _KinematicCore.DoubleVector___bool__(self)

    def __len__(self):
        return _KinematicCore.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _KinematicCore.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _KinematicCore.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _KinematicCore.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _KinematicCore.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _KinematicCore.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _KinematicCore.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _KinematicCore.DoubleVector_pop(self)

    def append(self, x):
        return _KinematicCore.DoubleVector_append(self, x)

    def empty(self):
        return _KinematicCore.DoubleVector_empty(self)

    def size(self):
        return _KinematicCore.DoubleVector_size(self)

    def swap(self, v):
        return _KinematicCore.DoubleVector_swap(self, v)

    def begin(self):
        return _KinematicCore.DoubleVector_begin(self)

    def end(self):
        return _KinematicCore.DoubleVector_end(self)

    def rbegin(self):
        return _KinematicCore.DoubleVector_rbegin(self)

    def rend(self):
        return _KinematicCore.DoubleVector_rend(self)

    def clear(self):
        return _KinematicCore.DoubleVector_clear(self)

    def get_allocator(self):
        return _KinematicCore.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _KinematicCore.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _KinematicCore.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _KinematicCore.DoubleVector_swiginit(self, _KinematicCore.new_DoubleVector(*args))

    def push_back(self, x):
        return _KinematicCore.DoubleVector_push_back(self, x)

    def front(self):
        return _KinematicCore.DoubleVector_front(self)

    def back(self):
        return _KinematicCore.DoubleVector_back(self)

    def assign(self, n, x):
        return _KinematicCore.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _KinematicCore.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _KinematicCore.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _KinematicCore.DoubleVector_reserve(self, n)

    def capacity(self):
        return _KinematicCore.DoubleVector_capacity(self)
    __swig_destroy__ = _KinematicCore.delete_DoubleVector

# Register DoubleVector in _KinematicCore:
_KinematicCore.DoubleVector_swigregister(DoubleVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _KinematicCore.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _KinematicCore.BoolVector___nonzero__(self)

    def __bool__(self):
        return _KinematicCore.BoolVector___bool__(self)

    def __len__(self):
        return _KinematicCore.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _KinematicCore.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _KinematicCore.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _KinematicCore.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _KinematicCore.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _KinematicCore.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _KinematicCore.BoolVector___setitem__(self, *args)

    def pop(self):
        return _KinematicCore.BoolVector_pop(self)

    def append(self, x):
        return _KinematicCore.BoolVector_append(self, x)

    def empty(self):
        return _KinematicCore.BoolVector_empty(self)

    def size(self):
        return _KinematicCore.BoolVector_size(self)

    def swap(self, v):
        return _KinematicCore.BoolVector_swap(self, v)

    def begin(self):
        return _KinematicCore.BoolVector_begin(self)

    def end(self):
        return _KinematicCore.BoolVector_end(self)

    def rbegin(self):
        return _KinematicCore.BoolVector_rbegin(self)

    def rend(self):
        return _KinematicCore.BoolVector_rend(self)

    def clear(self):
        return _KinematicCore.BoolVector_clear(self)

    def get_allocator(self):
        return _KinematicCore.BoolVector_get_allocator(self)

    def pop_back(self):
        return _KinematicCore.BoolVector_pop_back(self)

    def erase(self, *args):
        return _KinematicCore.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _KinematicCore.BoolVector_swiginit(self, _KinematicCore.new_BoolVector(*args))

    def push_back(self, x):
        return _KinematicCore.BoolVector_push_back(self, x)

    def front(self):
        return _KinematicCore.BoolVector_front(self)

    def back(self):
        return _KinematicCore.BoolVector_back(self)

    def assign(self, n, x):
        return _KinematicCore.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _KinematicCore.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _KinematicCore.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _KinematicCore.BoolVector_reserve(self, n)

    def capacity(self):
        return _KinematicCore.BoolVector_capacity(self)
    __swig_destroy__ = _KinematicCore.delete_BoolVector

# Register BoolVector in _KinematicCore:
_KinematicCore.BoolVector_swigregister(BoolVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _KinematicCore.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _KinematicCore.IntVector___nonzero__(self)

    def __bool__(self):
        return _KinematicCore.IntVector___bool__(self)

    def __len__(self):
        return _KinematicCore.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _KinematicCore.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _KinematicCore.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _KinematicCore.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _KinematicCore.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _KinematicCore.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _KinematicCore.IntVector___setitem__(self, *args)

    def pop(self):
        return _KinematicCore.IntVector_pop(self)

    def append(self, x):
        return _KinematicCore.IntVector_append(self, x)

    def empty(self):
        return _KinematicCore.IntVector_empty(self)

    def size(self):
        return _KinematicCore.IntVector_size(self)

    def swap(self, v):
        return _KinematicCore.IntVector_swap(self, v)

    def begin(self):
        return _KinematicCore.IntVector_begin(self)

    def end(self):
        return _KinematicCore.IntVector_end(self)

    def rbegin(self):
        return _KinematicCore.IntVector_rbegin(self)

    def rend(self):
        return _KinematicCore.IntVector_rend(self)

    def clear(self):
        return _KinematicCore.IntVector_clear(self)

    def get_allocator(self):
        return _KinematicCore.IntVector_get_allocator(self)

    def pop_back(self):
        return _KinematicCore.IntVector_pop_back(self)

    def erase(self, *args):
        return _KinematicCore.IntVector_erase(self, *args)

    def __init__(self, *args):
        _KinematicCore.IntVector_swiginit(self, _KinematicCore.new_IntVector(*args))

    def push_back(self, x):
        return _KinematicCore.IntVector_push_back(self, x)

    def front(self):
        return _KinematicCore.IntVector_front(self)

    def back(self):
        return _KinematicCore.IntVector_back(self)

    def assign(self, n, x):
        return _KinematicCore.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _KinematicCore.IntVector_resize(self, *args)

    def insert(self, *args):
        return _KinematicCore.IntVector_insert(self, *args)

    def reserve(self, n):
        return _KinematicCore.IntVector_reserve(self, n)

    def capacity(self):
        return _KinematicCore.IntVector_capacity(self)
    __swig_destroy__ = _KinematicCore.delete_IntVector

# Register IntVector in _KinematicCore:
_KinematicCore.IntVector_swigregister(IntVector)

class cKinematicCore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, charfile, scale=1.0):
        _KinematicCore.cKinematicCore_swiginit(self, _KinematicCore.new_cKinematicCore(charfile, scale))

    def getCharacter(self):
        return _KinematicCore.cKinematicCore_getCharacter(self)

    def setPose(self, pose):
        return _KinematicCore.cKinematicCore_setPose(self, pose)

    def setVel(self, vel):
        return _KinematicCore.cKinematicCore_setVel(self, vel)

    def setHeadingVec(self, head):
        return _KinematicCore.cKinematicCore_setHeadingVec(self, head)

    def getHeadingTheta(self, ori):
        return _KinematicCore.cKinematicCore_getHeadingTheta(self, ori)

    def getPose(self):
        return _KinematicCore.cKinematicCore_getPose(self)

    def getVel(self):
        return _KinematicCore.cKinematicCore_getVel(self)

    def buildState(self, *args):
        return _KinematicCore.cKinematicCore_buildState(self, *args)

    def getJointPos(self, id):
        return _KinematicCore.cKinematicCore_getJointPos(self, id)

    def getJointLocalOri(self, id):
        return _KinematicCore.cKinematicCore_getJointLocalOri(self, id)

    def getJointOmg(self, id):
        return _KinematicCore.cKinematicCore_getJointOmg(self, id)

    def getJointLocalOmg(self, id):
        return _KinematicCore.cKinematicCore_getJointLocalOmg(self, id)

    def getJointVel(self, id):
        return _KinematicCore.cKinematicCore_getJointVel(self, id)

    def getBodyPos(self, id):
        return _KinematicCore.cKinematicCore_getBodyPos(self, id)

    def getBodyOmg(self, id):
        return _KinematicCore.cKinematicCore_getBodyOmg(self, id)

    def getBodyVel(self, id):
        return _KinematicCore.cKinematicCore_getBodyVel(self, id)

    def getCoMPos(self):
        return _KinematicCore.cKinematicCore_getCoMPos(self)

    def getCoMVel(self):
        return _KinematicCore.cKinematicCore_getCoMVel(self)

    def getJointGlobalPoses(self, ids):
        return _KinematicCore.cKinematicCore_getJointGlobalPoses(self, ids)

    def slerp(self, pose0, pose1, t):
        return _KinematicCore.cKinematicCore_slerp(self, pose0, pose1, t)

    def actionAsOffset(self, pose, action):
        return _KinematicCore.cKinematicCore_actionAsOffset(self, pose, action)

    def expMapToTargetPose(self, exp_map, padding=False):
        return _KinematicCore.cKinematicCore_expMapToTargetPose(self, exp_map, padding)

    def calcStateDiff(self, pose0, pose1, rel_root_pos, rel_root_ori, rel_endeffector):
        return _KinematicCore.cKinematicCore_calcStateDiff(self, pose0, pose1, rel_root_pos, rel_root_ori, rel_endeffector)

    def printStateDiff(self):
        return _KinematicCore.cKinematicCore_printStateDiff(self)

    def setStateDiffLim(self, pose_diff):
        return _KinematicCore.cKinematicCore_setStateDiffLim(self, pose_diff)

    def checkStateDiff(self, pose0, pose1, rel_root_pos, rel_root_ori, rel_endeffector):
        return _KinematicCore.cKinematicCore_checkStateDiff(self, pose0, pose1, rel_root_pos, rel_root_ori, rel_endeffector)

    def checkStateDiffVec(self, pose0, pose1, rel_root_pos, rel_root_ori, rel_endeffector):
        return _KinematicCore.cKinematicCore_checkStateDiffVec(self, pose0, pose1, rel_root_pos, rel_root_ori, rel_endeffector)

    def calcReward(self, pose0, vel0, pose1, vel1):
        return _KinematicCore.cKinematicCore_calcReward(self, pose0, vel0, pose1, vel1)

    def getErrorVec(self):
        return _KinematicCore.cKinematicCore_getErrorVec(self)

    def lowestHeight(self, pose):
        return _KinematicCore.cKinematicCore_lowestHeight(self, pose)
    __swig_destroy__ = _KinematicCore.delete_cKinematicCore

# Register cKinematicCore in _KinematicCore:
_KinematicCore.cKinematicCore_swigregister(cKinematicCore)


def momentum(pose):
    return _KinematicCore.momentum(pose)

def kinematicEnergy(*args):
    return _KinematicCore.kinematicEnergy(*args)

def gravitationalEnergy(pose):
    return _KinematicCore.gravitationalEnergy(pose)

def jointVelActivation(pose, w):
    return _KinematicCore.jointVelActivation(pose, w)

def bodyConvexHullVolume(pose, b_id):
    return _KinematicCore.bodyConvexHullVolume(pose, b_id)

def jointConvexHullVolume(pose, j_id):
    return _KinematicCore.jointConvexHullVolume(pose, j_id)

def butterworthFilter(dt, clip, x):
    return _KinematicCore.butterworthFilter(dt, clip, x)


